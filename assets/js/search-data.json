{
  
    
        "post0": {
            "title": "Title",
            "content": "%%js console.log(&quot;Function Definition&quot;); /* Function: logIt * Parameter: output * Description: The parameter is &quot;output&quot; to console and jupyter page */ function logIt(output) { console.log(output); element.append(output + &quot;&lt;br&gt;&quot;); //alert(output); } // First sequence calling logIt function var msg = &quot;Hello, World!&quot;; logIt(msg); // Second sequence calling logIt function var msg = &quot;Hello, &lt;b&gt;Students&lt;/b&gt;!&quot; // replaces content of variable var classOf = &quot;Welcome CS class of 2023-2024.&quot; logIt(msg + &quot; &quot; + classOf); // concatenation of strings . output showing Loosely typed data . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. . To define a variable you prefix the name with var or const. The variable type is determined by JavaScript at runtime. | Python and many interpretive languages are loosely typed like JavaScript. This is considered programmer friendly. | Java which is a compiled language is strongly typed, thus you will see terms like String, Integer, Double, and Object in the source code. | In JavaScript, the typeof keyword returns the type of the variable. Become familiar with type as it is valuable in conversation and knowing type help you understand how to modify data. Each variable type will have built in methods to manage content within the data type. | . %%js console.log(&quot;Examine Data Types&quot;); // Function to add typeof to output function getType(output) { return typeof output + &quot;: &quot; + output; } // Function defintion function logIt(output) { console.log(getType(output)); // logs string console.info(output); // logs object element.append(getType(output) + &quot;&lt;br&gt;&quot;); // adds to Jupyter output //alert(getType(output)); } // Common Types element.append(&quot;Common Types &lt;br&gt;&quot;); logIt(&quot;Mr M&quot;); // String logIt(1997); // Number logIt(true); // Boolean element.append(&quot;&lt;br&gt;&quot;); // Object Type, this definition is often called a array or list element.append(&quot;Object Type, array &lt;br&gt;&quot;); var scores = [ 90, 80, 100 ]; logIt(scores); element.append(&quot;&lt;br&gt;&quot;); // Complex Object, this definition is often called hash, map, hashmap, or dictionary element.append(&quot;Object Type, hash or dictionary &lt;br&gt;&quot;); var person = { // key:value pairs seperated by comma &quot;name&quot;: &quot;Mr M&quot;, &quot;role&quot;: &quot;Teacher&quot; }; logIt(person); logIt(JSON.stringify(person)); //method used to convert this object into readable format . Build a Person object and JSON . JavaScript and other languages have special properties and syntax to store and represent data. In fact, a class in JavaScript is a special function. . Definition of class allows for a collection of data, the &quot;class Person&quot; allows programmer to retain name, github id, and class of a Person. | Instance of a class, the &quot;const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; makes an object &quot;teacher&quot; which is an object representation of &quot;class Person&quot;. | Setting and Getting properties After creating teacher and student objects, observe that properties can be changed/muted or extracted/accessed. | . %%html &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;html&gt; &lt;head&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; #jsonTable, #flaskTable { background-color: #353b45; padding: 10px; border: 3px solid #ccc; box-shadow: 0.8em 0.4em 0.4em grey; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;table id=&quot;jsonTable&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Book JSON Data&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td id=&quot;jsonText&quot;&gt;{&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . . Classroom JSON Data . {&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]} | . . %%js console.log(&quot;Person objects&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: role uses a default property, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } // make a new Person Object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // update role to Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.logIt(); // log to console // make a new Person Object const student = new Person(&quot;Jane Doe&quot;, &quot;jane&quot;, 2007); // object type is easy to work with in JavaScript student.logIt(); // log to console . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . %%js console.log(&quot;Classroom object&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: this.role is a default property retained in object, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } /* class: Classroom * Description: A collection of Person objects */ class Classroom { /* method: constructor * parameters: teacher - a Person object, students - an array of Person objects * description: returns object when &quot;new Classroom()&quot; is called containing properties and methods of a Classroom * assignment: this.classroom, this.teacher, ... are properties retained in the returned object */ constructor(teacher, students) { /* spread: this.classroom contains Teacher object and all Student objects * map: this.json contains of map of all persons to JSON */ this.teacher = teacher; this.students = students; this.classroom = [teacher, ...students]; // ... spread option this.json = &#39;{&quot;classroom&quot;:[&#39; + this.classroom.map(person =&gt; person.getJSON()) + &#39;]}&#39;; } /* method: logIT * description: &quot;this&quot; Classroom object is logged to console */ logIt() { //Classroom object console.log(this); //Classroom json element.append(&quot;Classroom object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } /* function: constructCompSciClassroom * Description: Create data for Classroom and Person objects * Returns: A Classroom Object */ function constructCompSciClassroom() { // define a Teacher object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Teacher&quot;); // optional 4th parameter // define a student Array of Person objects const students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;VidhiKulkarni&quot;, 2024) ]; // make a CompSci classroom from formerly defined teacher and student objects return new Classroom(teacher, students); // returns object } // assigns &quot;compsci&quot; to the object returned by &quot;constructCompSciClassroom()&quot; function const compsci = constructCompSciClassroom(); // output of Objects and JSON in CompSci classroom compsci.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(compsci.json); // posts/embeds/writes compsci.json to HTML DOM element called jsonText . for loop to generate Table Rows in HTML output . This code extracts JSON text from HTML, that was placed in DOM in an earlier JavaScript cell, then it parses text into a JavaScript object. In addition, there is a for loop that iterates over the extracted object generating formated rows and columns in an HTML table. . Table generation is broken into parts... table data is obtained from a classroom array inside of the extracted object. | the JavaScript for loop allows the construction of a new row of data for each Person hash object inside of the the Array. | in the loop a table row &lt;tr&gt; ... &lt;/tr&gt; is created for each Hash object in the Array. | in the loop table data, a table column, &lt;td&gt; ... &lt;/td&gt; is created for name, ghID, classOf, and role within the Hash object. | . | . %%js console.log(&quot;Classroom Web Page&quot;); // extract JSON text from HTML page const jsonText = document.getElementById(&quot;jsonText&quot;).innerHTML; console.log(jsonText); element.append(&quot;Raw jsonText element embedded in HTML&lt;br&gt;&quot;); element.append( jsonText + &quot;&lt;br&gt;&quot;); // convert JSON text to Object const classroom = JSON.parse(jsonText).classroom; console.log(classroom); // from classroom object creates rows and columns in HTML table element.append(&quot;&lt;br&gt;Formatted data sample from jsonText &lt;br&gt;&quot;); for (var row of classroom) { element.append(row.ghID + &quot; &quot; + row.name + &#39;&lt;br&gt;&#39;); // tr for each row, a new line $(&#39;#classroom&#39;).append(&#39;&lt;tr&gt;&#39;) // td for each column of data $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.ghID + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.classOf + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.role + &#39;&lt;/td&gt;&#39;) // tr to end row $(&#39;#classroom&#39;).append(&#39;&lt;/tr&gt;&#39;); } . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables syle and scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age . Hacks . One key to these hacks is to build confidence with me going into final grade, I would like to see each student adapt this frontend work in their final project. Second key is the finished work can serve as review for the course, notes for the future in relationship to frontend. . Adapt this tutorial to your own work | Consider what you need to work on to be stronger developer | Show something creative or unique, no cloning | Be ready to talk to Teacher for 5 to 10 minutes. Individually!!! | Show in Jupyter Notebook during discussion, show Theme and ChatGPT | Have a runtime final in GithHub Pages (or Fastpage) | .",
            "url": "https://nighthawkcoders.github.io/ram/2023/05/11/PBL-javascript_tutorial.html",
            "relUrl": "/2023/05/11/PBL-javascript_tutorial.html",
            "date": " • May 11, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Binary Math Lesson Plan",
            "content": "Vocab and Notes: . Logic gates (AND, OR, NOR, NAND) | Binary conversion | Bitwise operations | Binary search | Huffman coding | . In-class practice hacks (2-3) . Logic gate program | String to binary conversion program | . Homework hacks (1-2) . Binary calculator conversion | Huffman coding program | .",
            "url": "https://nighthawkcoders.github.io/ram/student/2023/04/23/ram-lesson-plan.html",
            "relUrl": "/student/2023/04/23/ram-lesson-plan.html",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Binary Math",
            "content": "WGET Link . Binary Recap and Notes . &gt; In the bullet points below, record 5 things that you already knew about binary before this lecture . - . &gt; Binary is can be applied in many ways to store, access, and manipulate information. Think of three applications that rely on binary. . - . Why is binary such an effective system for storing information? Why don&#39;t computers use the decimal system instead? . Bitwise Opperations . Fill in the blank spots below during the lecture . Opearator Name Action . &amp; | AND | | . | OR | | . ^ | XOR | | . ~ | NOT | | . &lt;&lt; | Left Shift | | . &gt;&gt; | Right Shift | | . &gt;&gt;&gt; | Zero-fill Right Shift | | . In this program, the binary operators &amp; (AND), | (OR), ^ (XOR), and ~ (NOT) are used to perform the binary operations on the input numbers. The results are stored in separate variables as decimal numbers. Then, the bin() function is used to convert each decimal result to binary, and the binary strings are stored in separate variables. Finally, the program returns a tuple of tuples, with each inner tuple containing both the decimal and binary result for each operation. The outer tuple is unpacked into separate variables for printing, and the results are displayed as both decimal and binary. . def binary_operations(num1, num2): # Perform the binary operations and_result_decimal = num1 &amp; num2 or_result_decimal = num1 | num2 xor_result_decimal = num1 ^ num2 not_result_decimal = ~num1 # Convert results to binary and_result_binary = bin(and_result_decimal)[2:] or_result_binary = bin(or_result_decimal)[2:] xor_result_binary = bin(xor_result_decimal)[2:] not_result_binary = bin(not_result_decimal)[2:] # Return the results as a tuple of tuples return ((and_result_decimal, and_result_binary), (or_result_decimal, or_result_binary), (xor_result_decimal, xor_result_binary), (not_result_decimal, not_result_binary)) # Ask the user for input num1 = int(input(&quot;Enter the first number: &quot;)) num2 = int(input(&quot;Enter the second number: &quot;)) # Call the binary_operations function and print the results and_result, or_result, xor_result, not_result = binary_operations(num1, num2) print(&quot;AND result: decimal =&quot;, and_result[0], &quot;, binary =&quot;, and_result[1]) print(&quot;OR result: decimal =&quot;, or_result[0], &quot;, binary =&quot;, or_result[1]) print(&quot;XOR result: decimal =&quot;, xor_result[0], &quot;, binary =&quot;, xor_result[1]) print(&quot;NOT result: decimal =&quot;, not_result[0], &quot;, binary =&quot;, not_result[1]) . AND result: decimal = 2 , binary = 10 OR result: decimal = 58 , binary = 111010 XOR result: decimal = 56 , binary = 111000 NOT result: decimal = -11 , binary = b1011 . Bitwise operations are used in a variety of applications, particularly in low-level programming and computer science. Some common used of bitwise operations include:&gt; - Flag Management: Flags are used to keep track of the state of a system or a program. Bitwise operations can be used to set, clear, and toggle flags.&gt; - Bit Manipulation:Bitwise operations can be used to manipulate individual bits in a binary number. This is often used to extract specific bits from a number, set specific bits to a particular value, or flip the value of specific bits.&gt; - Masking:Masking is used to extract a specific subset of bits from a binary number. Bitwise operations are commonly used for masking, particularly in low-level programming.&gt; - Encryption:Bitwise operations can be used in cryptographic applications to scramble and unscramble data. One common application of bitwise operations in encryption is the XOR operation.&gt; - Graphics:Bitwise operations can be used in computer graphics to manipulate individual pixels on a screen. This can be used to draw shapes, change colors, and create special effects.&gt; - Networking:Bitwise operations are used extensively in networking applications, particularly in the handling of IP addresses and port numbers. . Binary to String Conversion . This program defines a string_to_binary function that takes a string as input and returns the binary representation of the string. The function uses a for loop to iterate over each character in the string. For each character, the ord function is used to get its ASCII code, which is then converted to binary using the format function with the &#39;08b&#39; format specifier to ensure that each binary number is 8 digits long. The resulting binary numbers are concatenated to form the final binary string. . . # Function to convert a string to binary def string_to_binary(string): binary = &#39;&#39; for char in string: binary += format(ord(char), &#39;08b&#39;) # Convert the character to binary and append to the binary string return binary # Example usage word = input(&quot;Enter a word to convert to binary: &quot;) binary_word = string_to_binary(word) print(f&quot;The binary representation of &#39;{word}&#39; is {binary_word}&quot;) . The binary representation of &#39;word&#39; is 01110111011011110111001001100100 . Many programs use binary conversion, particularly those related to computer science, electrical engineering, and mathematics. Programs that rely on binary conversion include:&gt; - Networking: Programs that deal with network addresses, such as IP addresses and subnet masks, use binary conversion to represent and manipulate the addresses.&gt; - Cryptography:Programs that deal with encryption and decryption use binary conversion to encode and decode data.&gt; - Computer Hardware:Programs that interface with computer hardware, such as drivers and firmware, often use binary conversion to communicate with the hardware at the binary level.&gt; - Mathematical Applications:Programs that deal with complex calculations and mathematical analysis, such as statistical analysis or machine learning algorithms, may use binary conversion to represent large numbers or complex data sets.&gt; - Finance:Programs that deal with financial calculations and accounting may use binary conversion to represent fractional amounts or complex financial data. . Binary Search . An algorithm made to find an item from a list of items | Works by dividing the list repeatedly to narrow down which half (the low or high half) that contains the item | Lists of integers are often used with binary search | Binary search makes searching more efficient, as it ensures the program won&#39;t have to search through an entire list of items one by one | List must be sorted | . What are some situations in which binary search could be used? . Real Example of Binary Search . Binary search operates a lot like a &quot;guess the number&quot; game. Try the game and explain how the two are similar. . import random hid = random.randint(0,100) gues = 0 def game(): global gues gues += 1 num = int(input(&#39;Pick a number&#39;)) if num &lt; hid: print(&#39;higher&#39;) game() if num &gt; hid: print(&#39;lower&#39;) game() if num == hid: print(hid) print(&#39;You Win !!!&#39;) print(&#39;guesses: &#39;, gues) game() . Logic Gates . Accepts inputs and then outputs a result based on what the inputs were . NOT Gate (aka inverter) | Accepts a single input and outputs the opposite value. | Ex: If the input is 0, the output is 1 | . AND Gates | Multiple inputs | Accepts two inputs. | If both inputs &quot;true,&quot; it returns &quot;true.&quot; | If both inputs are &quot;false,&quot; it returns &quot;false.&quot; | What would it return if one input was &quot;true&quot; and the other was &quot;false&quot;? Discuss. | . OR Gates | Accepts two inputs. | As long as one of the two inputs is &quot;true,&quot; it returns &quot;true.&quot; | If both inputs are &quot;false,&quot; what would the OR gate return? Discuss. | . Universal Logic Gates . NAND Gate | Accepts two inputs. | Outputs &quot;false&quot; ONLY when both of its inputs are &quot;true.&quot; At all other times, the gate produces an output of &quot;true.&quot; | . NOR Gate | Accepts two inputs. | Outputs &quot;true&quot; only when both of its inputs are &quot;false.&quot; At all other times, the gate produces an output of &quot;false.&quot; | . Collegeboard Practice . Noor&#39;s Video . . Hacks . Take notes and answer the questions above. Make sure you understand the purpose and function of the xample programs. (0.9) . | Complete this quiz and attach a screen shot of your score below. If you missed any questions, explain why you got it wrong and write a short summary of your understanding of the content. (0.9) . | As your tangible, create a program that allows a user to input two numbers and an operation, converts the numbers to binary and performs the given operation, and returns the value in decimal values. (0.9) . | . Applying Binary Math - Calculator Hack . Calculators use binary math to perform arithmetic operations such as addition, subtraction, multiplication, and division.In a calculator, the binary digits are represented by electronic switches that can be either on or off, corresponding to 1 or 0 respectively. These switches are arranged in groups of eight to form bytes, which are used to represent larger numbers. When a user enters a number into a calculator, the number is converted into binary form and stored in the calculator&#39;s memory.To perform an arithmetic operation, the calculator retrieves the numbers from its memory and performs the operation using binary math. . For example, to add the binary numbers 1010 and 1101, the calculator would perform the following steps:&gt; 1. Add the rightmost digits, 0 and 1, which gives a sum of 1.&gt; 2. Move to the next digit to the left and add the digits along with any carry from the previous step. In this case, we have 1 + 0 + 1, which gives a sum of 10. The carry of 1 is then carried over to the next digit. . Repeat step 2 for the remaining digits until all digits have been added. | The result of the addition in this example is the binary number 10111, which is equivalent to the decimal number 23. | Similarly, subtraction, multiplication, and division are performed using binary math. The algorithms for these operations are based on the same principles as those used in decimal arithmetic, but with binary digits and powers of 2 instead of decimal digits and powers of 10. . def binary_math(num1, num2, operator): # Write your calculator function here # Ask the user for input num1 = int(input(&quot;Enter the first number: &quot;)) num2 = int(input(&quot;Enter the second number: &quot;)) operator = input(&quot;Enter the operator (+, -, *, /): &quot;) # Call the binary_math function and print the result result = binary_math(num1, num2, operator) print(&quot;Result:&quot;, result) .",
            "url": "https://nighthawkcoders.github.io/ram/student/2023/04/21/P5Y-BinaryMathLessonFinal.html",
            "relUrl": "/student/2023/04/21/P5Y-BinaryMathLessonFinal.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Binary Math",
            "content": "Binary Recap and Notes . &gt; In the bullet points below, record 5 things that you already knew about binary before this lecture . - . &gt; Binary is can be applied in many ways to store, access, and manipulate information. Think of three applications that rely on binary. . - . Why is binary such an effective system for storing information? Why don&#39;t computers use the decimal system instead? . Bitwise Opperations . Fill in the blank spots below during the lecture . Opearator Name Action . &amp; | AND | | . | OR | | . ^ | XOR | | . ~ | NOT | | . &lt;&lt; | Left Shift | | . &gt;&gt; | Right Shift | | . &gt;&gt;&gt; | Zero-fill Right Shift | | . In this program, the __ &amp; (AND), | (OR), ^ (XOR), and ~ (NOT) are used to perform the binary operations on the input numbers. The results are stored in separate variables as __. Then, the ___ function is used to convert each decimal result to binary, and the binary strings are stored in separate variables. Finally, the program returns a tuple of tuples, with each inner tuple containing both the decimal and binary result for each operation. The outer tuple is __ into separate variables for printing, and the results are displayed as both decimal and binary. . def binary_operations(num1, num2): # Perform the binary operations and_result_decimal = num1 &amp; num2 or_result_decimal = num1 | num2 xor_result_decimal = num1 ^ num2 not_result_decimal = ~num1 # Convert results to binary and_result_binary = bin(and_result_decimal)[2:] or_result_binary = bin(or_result_decimal)[2:] xor_result_binary = bin(xor_result_decimal)[2:] not_result_binary = bin(not_result_decimal)[2:] # Return the results as a tuple of tuples return ((and_result_decimal, and_result_binary), (or_result_decimal, or_result_binary), (xor_result_decimal, xor_result_binary), (not_result_decimal, not_result_binary)) # Ask the user for input num1 = int(input(&quot;Enter the first number: &quot;)) num2 = int(input(&quot;Enter the second number: &quot;)) # Call the binary_operations function and print the results and_result, or_result, xor_result, not_result = binary_operations(num1, num2) print(&quot;AND result: decimal =&quot;, and_result[0], &quot;, binary =&quot;, and_result[1]) print(&quot;OR result: decimal =&quot;, or_result[0], &quot;, binary =&quot;, or_result[1]) print(&quot;XOR result: decimal =&quot;, xor_result[0], &quot;, binary =&quot;, xor_result[1]) print(&quot;NOT result: decimal =&quot;, not_result[0], &quot;, binary =&quot;, not_result[1]) . AND result: decimal = 2 , binary = 10 OR result: decimal = 58 , binary = 111010 XOR result: decimal = 56 , binary = 111000 NOT result: decimal = -11 , binary = b1011 . Bitwise operations are used in a variety of applications, particularly in low-level programming and computer science. Some common used of bitwise operations include:&gt; - Flag Management: Flags are used to keep track of the __. Bitwise operations can be used to set, clear, and toggle flags.&gt; - Bit Manipulation:Bitwise operations can be used to __ in a binary number. This is often used to __ specific bits from a number, set specific bits to a particular value, or flip the value of specific bits.&gt; - Masking:Masking is used to extract a __ from a binary number. Bitwise operations are commonly used for masking, particularly in low-level programming. . Encryption:Bitwise operations can be used in cryptographic applications to scramble and unscramble data. One common application of bitwise operations in encryption is the __ operation.&gt; - Graphics:Bitwise operations can be used in computer graphics to manipulate individual __ on a screen. This can be used to draw shapes, change colors, and create special effects.&gt; - Networking:Bitwise operations are used extensively in __ applications, particularly in the handling of IP addresses and port numbers. | . Binary to String Conversion . This program defines a string_to_binary function that takes a string as input and returns the binary representation of the string. The function uses a for loop to iterate over each character in the string. For each character, the ord function is used to get its ASCII code, which is then converted to binary using the format function with the &#39;08b&#39; format specifier to ensure that each binary number is 8 digits long. The resulting binary numbers are concatenated to form the final binary string. . . # Function to convert a string to binary def string_to_binary(string): binary = &#39;&#39; for char in string: binary += format(ord(char), &#39;08b&#39;) # Convert the character to binary and append to the binary string return binary # Example usage word = input(&quot;Enter a word to convert to binary: &quot;) binary_word = string_to_binary(word) print(f&quot;The binary representation of &#39;{word}&#39; is {binary_word}&quot;) . The binary representation of &#39;word&#39; is 01110111011011110111001001100100 . Many programs use binary conversion, particularly those related to computer science, electrical engineering, and mathematics. Programs that rely on binary conversion include:&gt; - Networking: Programs that deal with network addresses, such as IP addresses and subnet masks, use binary conversion to represent and manipulate the addresses.&gt; - Cryptography:Programs that deal with encryption and decryption use binary conversion to encode and decode data.&gt; - Computer Hardware:Programs that interface with computer hardware, such as drivers and firmware, often use binary conversion to communicate with the hardware at the binary level.&gt; - Mathematical Applications:Programs that deal with complex calculations and mathematical analysis, such as statistical analysis or machine learning algorithms, may use binary conversion to represent large numbers or complex data sets.&gt; - Finance:Programs that deal with financial calculations and accounting may use binary conversion to represent fractional amounts or complex financial data. . Binary Search . An algorithm made to find an __ from a list of __ | Works by dividing the list repeatedly to narrow down which half (the low or high half) that contains the item | Lists of __ are often used with binary search | Binary search makes searching more efficient, as it ensures the program won&#39;t have to search through an entire list of items one by one | List must be sorted | . What are some situations in which binary search could be used? . - . ### Real Example of Binary Search . | . Binary search operates a lot like a &quot;guess the number&quot; game. Try the game and explain how the two are similar. . import random hid = random.randint(0,100) gues = 0 def game(): global gues gues += 1 num = int(input(&#39;Pick a number&#39;)) if num &lt; hid: print(&#39;higher&#39;) game() if num &gt; hid: print(&#39;lower&#39;) game() if num == hid: print(hid) print(&#39;You Win !!!&#39;) print(&#39;guesses: &#39;, gues) game() . Logic Gates . Accepts inputs and then outputs a result based on what the inputs were . NOT Gate (aka inverter) | Accepts a single input and outputs the opposite value. | Ex: If the input is 0, the output is 1 | . AND Gates | Multiple inputs | Accepts two inputs. | If both inputs &quot;true,&quot; it returns &quot;true.&quot; | If both inputs are &quot;false,&quot; it returns &quot;false.&quot; | What would it return if one input was &quot;true&quot; and the other was &quot;false&quot;? Discuss and record below. . | | . OR Gates | Accepts two inputs. | As long as one of the two inputs is &quot;true,&quot; it returns &quot;true.&quot; | If both inputs are &quot;false,&quot; what would the OR gate return? Discuss and record below. . | | . Universal Logic Gates . NAND Gate | Accepts two inputs. | Outputs &quot;false&quot; ONLY when both of its inputs are &quot;true.&quot; At all other times, the gate produces an output of &quot;true.&quot; | . NOR Gate | Accepts two inputs. | Outputs &quot;true&quot; only when both of its inputs are &quot;false.&quot; At all other times, the gate produces an output of &quot;false.&quot; | . Collegeboard Practice . Noor&#39;s Video . . Hacks . Take notes and answer the questions above. Make sure you understand the purpose and function of the xample programs. (0.9) . | Complete this quiz and attach a screen shot of your score below. If you missed any questions, explain why you got it wrong and write a short summary of your understanding of the content. (0.9) . | As your tangible, create a program that allows a user to input two numbers and an operation, converts the numbers to binary and performs the given operation, and returns the value in decimal values. (0.9) . | . Applying Binary Math - Calculator Hack . Calculators use binary math to perform arithmetic operations such as addition, subtraction, multiplication, and division.In a calculator, the binary digits are represented by electronic switches that can be either on or off, corresponding to 1 or 0 respectively. These switches are arranged in groups of eight to form bytes, which are used to represent larger numbers. When a user enters a number into a calculator, the number is converted into binary form and stored in the calculator&#39;s memory.To perform an arithmetic operation, the calculator retrieves the numbers from its memory and performs the operation using binary math. . For example, to add the binary numbers 1010 and 1101, the calculator would perform the following steps:&gt; 1. Add the rightmost digits, 0 and 1, which gives a sum of 1.&gt; 2. Move to the next digit to the left and add the digits along with any carry from the previous step. In this case, we have 1 + 0 + 1, which gives a sum of 10. The carry of 1 is then carried over to the next digit. . Repeat step 2 for the remaining digits until all digits have been added. | The result of the addition in this example is the binary number 10111, which is equivalent to the decimal number 23. | Similarly, subtraction, multiplication, and division are performed using binary math. The algorithms for these operations are based on the same principles as those used in decimal arithmetic, but with binary digits and powers of 2 instead of decimal digits and powers of 10. . def binary_math(num1, num2, operator): # Write your calculator function here # Ask the user for input num1 = int(input(&quot;Enter the first number: &quot;)) num2 = int(input(&quot;Enter the second number: &quot;)) operator = input(&quot;Enter the operator (+, -, *, /): &quot;) # Call the binary_math function and print the result result = binary_math(num1, num2, operator) print(&quot;Result:&quot;, result) .",
            "url": "https://nighthawkcoders.github.io/ram/student/2023/04/21/P5Y-BinaryMathLesson-student-copy.html",
            "relUrl": "/student/2023/04/21/P5Y-BinaryMathLesson-student-copy.html",
            "date": " • Apr 21, 2023"
        }
        
    
  

  
  
      ,"page0": {
          "title": "homepage",
          "content": "WELCOME TO THE SITE! .",
          "url": "https://nighthawkcoders.github.io/ram/homepage",
          "relUrl": "/homepage",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Frontend",
          "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Frontend Web Development Overview . . Frontend web development is the development of the graphical user interface of a website, through the use of HTML, CSS, and JavaScript, so that users can view and interact with that website through a Browser. In this class, we will be using Fastpages on top of GitHub Pages to maximize our presentations, while minimizing our front-end coding. GitHub Pages deployment is performed through Jekyll, which regenerates the website automatically after each commit, tracking can be seen in Actions tab within GitHub. | HTML generation is performed through Liquid, a template language (similar to Jinja2 or Thymeleaf). | CSS style layout is provided by using Themes provided through GH Pages. Each page we make we assume the defined theme and insert our HTML fragments, local page style, and local page JavaScript. | JavaScript enables pages to have actions, fetch content, animate, etc | . . . Code in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the Web. Many tools and languages complement development using markup, style and JavaScript. This section of the Nighthawk Coders CS website is providing some code samples. These are intended to spark your own PBL ideas. Each of these were generated after watching others teach or interacting with students. . Tutorial: This page is a FastPages _post. This page contains Markdown and HTML. Pull this file into VSCode and explore the fundamentals of making a content page. | Calculator: This calculator was inspired by Mr. Mortensen’s calculator that he built in Objective-C during his first year of teaching at DNHS (2019). It was recreated by former student Anthony using Fastpages, HTML, JavaScript, and CSS on this site in 2022. Creating a calculator helps developers to learn how to manage temporary data, manage presentation, associate input to calculator output, and work with logic | Visually it shows how math works within a language; specific functions, handling of strings, numbers, math, etc. | . | Binary: This example was created after watching Harvard CS50 by David J. Malan in 2020, he had built a machine to turn on and off lights/binary digits. My thought after watching machine, why not simulate that binary machine in software? Liquid is used to define a constant for the number of bits | JavaScript is used base 2, 8, 16 calculations | . | Grades: This grade calculator was created to show interaction of HTML and JavaScript to perform input. Additionally, it show how to add element to HTML Document Object Model (DOM). FYI, the IJavaScript kernel did not support input as of this writing. | Graph: This was created when a student named Bryant 2022 asked me the question “how would I plot data?” as described in an FRQ. JavaScript canvas is used to draw grid, axis, lines | . | Life: This was created by Nathaniel 2022 when I asked him about something interesting to show students in JS that relates to school. Built on Conway’s Game of Life (Wikipedia, Original) | Somewhat pure JavaScript, no canvas usage even though it has a grid. | . | Snake: This was interest of students in each of my 3 years, inspiration and some of the code came from a student named Nolan 2021. Contains menu and settings, as well as Grid | Uses JavaScript canvas and key events | . | .",
          "url": "https://nighthawkcoders.github.io/ram/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "| Overview | Covid19 RapidAPI | Jokes API | Users Database | User Login | . APIs in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the API. Python and API resource definitions are used for RESTful API definitions. Abstraction of Frontend and Backend code, the exchange of standard data format (JSON), and guidelines for exchange (REST) is a technique that saves a lot of time between developers. Learning APIs is a highly recommended step for every developer trying to break into the world of tech. . Covid19: RapidAPI example. This is introducing APIs by accessing something that already exists. RapidAPI shows how many practice RESTful definitions. Almost any data source imagined can be accessed here. | Jokes: An introduction to Python RESTful API libraries. A Python List is used to make a Data Model, but persistence in this technique is limited, each time server is refreshed data is lost. This example is great for learning, but data is considered volatile. | Users: Another RESTful API library example. However, this backend establishes data persistence through the use of a database. This data if properly managed in deployment and migrated when changed can last forever. | . Web API Overview . . A Web API is an application programming interface typically for a web browser. Non-changing or Static Endpoints are used in interacting with the server-side Web APIs. RESTful Web APIs use HTTP methods to access resources via URL parameters, and use JSON for transmitting text between client and server. Server. In these examples, we will be using Python to define REST APIs. Python tools are very popular for building RESTful APIs | REST: Representational State Transfer. A set of guidelines on how to architect a network-connected software system. | Client-server: One guideline is a client and server must be decoupled from each other, allowing each to develop independently. | Layered system: The client may access the resources on the server indirectly through other layers such as a proxy or using authentication. This will be clarified by application and security requirements. | . Client. JavaScript is the frontend language used to consume data from the Python defined REST APIs. Fetch will be used to make HTTP requests, as well as handle HTTP response. There are four basic HTTP methods, they align with Create, Read, Update, Delete (CRUD). | GET =&gt; Retrieve/Read data | POST =&gt; Create data | PUT =&gt; Update data | DELETE =&gt; Delete data | . REST endpoints will have similarity from application to application. In planning APIs, for a Users system you can anticipate key methods. The Users RESTful APIs would likely contain these endpoints. | GET: /users =&gt; Get a list of users | GET: /users(id) =&gt; Get a single user | POST: /users =&gt; Create a new user | PUT: /users(id) =&gt; Update a user | DELETE: /users(id) =&gt; Delete a user | . Once a RESTful API receives and processes an HTTP request, it will return an HTTP response. Included in this response is an HTTP status code. Common status codes are shown. | 200 =&gt; OK, this response will then have the promise of JSON data | 400 =&gt; Bad Request | 404 =&gt; Not Found | 500 =&gt; Internal Server Error (aka bug) | . . . .",
          "url": "https://nighthawkcoders.github.io/ram/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About",
          "content": "this site was created by sabine, alyssa, keira, shreya, noor, and devon! we aim to show binary in our project. enjoy! . https://www.tiktok.com/discover/onceler-thirst-edit here is a link to onceler thirst trap edits. .",
          "url": "https://nighthawkcoders.github.io/ram/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "",
          "content": "Objectives . . This Conceptual Framework teaches College Boards 5 Big Ideas of AP Computer Science Principles, Python, JavaScript, and Web Site application development together in an integrated fashion. The purpose is to teach College Board requirements while adding languages, tools, frameworks, and methodologies that meet Career Technical Education (CTE) needs. The outcome is preparing the High School student for the AP Test and simultaneously building the skills required for Computer Science internships. . . Blogs .",
          "url": "https://nighthawkcoders.github.io/ram/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nighthawkcoders.github.io/ram/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}